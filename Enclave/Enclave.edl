enclave {
    include "sgx_dh.h"
    include "../ocall_types.h"

    trusted {
        public int ecall_setup_card([in, size=client_param_size] EncryptedParam *client_param, size_t client_param_size, [in, out, size=array_size] uint16_t *array, [out, size=signature_size] ECDSA256Signature* enclave_signature, size_t signature_size, size_t array_size);
        public sgx_status_t ecall_validate_coords([in, size=client_param_size] EncryptedParam *client_param, size_t client_param_size, [in, size=coords_param_size] EncryptedParam *coords_param, size_t coords_param_size, [out] uint8_t *result, uint64_t timestamp, [out, size=signature_size] ECDSA256Signature* enclave_signature, size_t signature_size);
        public sgx_status_t ecall_print_logs([in, size=client_param_size] EncryptedParam *client_param, size_t client_param_size);
        public sgx_status_t ecall_generate_key([out, size=key_size] uint8_t* key, size_t key_size, [out, size=signature_size] ECDSA256Signature* enclave_signature, size_t signature_size);

        public sgx_status_t ecall_migration_finalize([in, size=encrypted_sz] uint8_t *encrypted, size_t encrypted_sz, [in, size=mac_sz] uint8_t *mac, size_t mac_sz);
        public sgx_status_t ecall_migration_prepare_record(uint32_t client_id, [out] uint8_t **encrypted, [out] size_t *encrypted_sz, [out] sgx_aes_gcm_128bit_tag_t **out_mac);
        public sgx_status_t ecall_get_enclave_version([out] uint8_t *version);

        public void ecall_init_session_initiator([out] sgx_status_t *dh_status);
        public void ecall_init_session_responder([out] sgx_status_t *dh_status);
        public void ecall_create_message1([out] sgx_dh_msg1_t *msg1, [out] sgx_status_t *dh_status);
        public void ecall_process_message1([in] const sgx_dh_msg1_t *msg1, [out] sgx_dh_msg2_t *msg2, [out] sgx_status_t *dh_status);
        public void ecall_process_message2([in] const sgx_dh_msg2_t *msg2, [out] sgx_dh_msg3_t *msg3, [out] sgx_status_t *dh_status);
        public void ecall_process_message3([in] const sgx_dh_msg3_t *msg3, [out] sgx_status_t *dh_status);

        public sgx_status_t ecall_generate_ecc_key_pair([out, size=key_size] ECDSA256PublicKey* enclave_public_key, size_t key_size);
    };

    untrusted {
        int ocall_write_sealed_data(int client_id, [in, size=sealed_data_size] uint8_t *sealed_data, size_t sealed_data_size);
        int ocall_get_sealed_data_size(int client_id, [out] size_t* file_size);
        int ocall_read_sealed_data(int client_id, [out, size=data_size] uint8_t* data, size_t data_size);
        void ocall_print([in, string]const char* str);
    };
};
